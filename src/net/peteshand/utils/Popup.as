package net.peteshand.utils {	import flash.display.Sprite;	import flash.external.ExternalInterface;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.ErrorEvent;	import flash.events.EventDispatcher;	import flash.text.StyleSheet;	/**	 * ...	 * @author Pete Shand	 */	public class Popup extends EventDispatcher 	{		[Embed(source="Popup.js", mimeType="application/octet-stream")]		private static const Javascript:Class;		private static var javascriptString:String;		public static var BaseJSInjected:Boolean = false;				static private function InjectBaseJS():void		{			if (!BaseJSInjected) {				BaseJSInjected = true;				javascriptString = new Javascript();				//trace("javascriptString = " + javascriptString);				trace('ExternalInterface.objectID = ' + ExternalInterface.objectID);								ExternalInterface.call(javascriptString, ExternalInterface.objectID);				ExternalInterface.call('console.log(asPopup)');			}		}		static public function Open(URL:String,options:PopupOptionsVO=null, timeout:Number=0):Window		{			InjectBaseJS();						if (options == null) options = new PopupOptionsVO();										if (options.callback != null) ExternalInterface.addCallback('callback', options.callback);						var id:String = ExternalInterface.call('asPopup.Open', URL, options, timeout, ExternalInterface.objectID);			return new Window(int(id));						/*var js:String = concatenate([functionOpenStart, initAsPopup, setTopLeft, setWindowOptions, openWindow, checkHeight, browserWindowSize, findBrowserDimensions, setTimeout, closeFunction]);			var id:String = ExternalInterface.call(js, URL, options, timeout, ExternalInterface.objectID);			return new Window(int(id));*/						//return new Window(0);;		}				static public function HtmlInjection(HTML:String,options:PopupOptionsVO=null,timeout:Number=0,css:StyleSheet=null):Window		{			if (options == null) {				options = new PopupOptionsVO();				options.width = 250;				options.height = 50;			}			if (options.callback != null) ExternalInterface.addCallback('callback', options.callback);						HTML = changeIDsToLowerCase(HTML);						var myStyleSheet:StyleSheet = new StyleSheet();			myStyleSheet.setStyle("body", { margin:'5px' } );			myStyleSheet.setStyle("h1", {fontFamily:'Arial, Helvetica, sans-serif',fontSize:'15px',fontWeight:'bold',color:'#000',margin:'0px'});			myStyleSheet.setStyle("p", {fontFamily:'Arial, Helvetica, sans-serif',fontSize:'15px',color:'#000',margin:'0px'});						for (var k:int = 0; k < css.styleNames.length; ++k) {				var styleName:String = css.styleNames[k];				myStyleSheet.setStyle(styleName, css.getStyle(styleName) );			}						var cssString:String = "";						for (var i:int = 0; i < myStyleSheet.styleNames.length; ++i) {				var name:String = myStyleSheet.styleNames[i];				var styleObject:Object = myStyleSheet.getStyle(name);				var numOfProperties:int = objectLength(styleObject);				var j:int = 0;				cssString += name + " { ";				for(var item:String in styleObject)				{					var value:String = styleObject[item];					value = value.toLowerCase();					//value = removePX(value);					value = removeSpaces(value);					value = replaceCommaSep(value);										if (containsComma(value)) cssString += removeCamelcase(item) + ":'" + value + "'; ";					else cssString += removeCamelcase(item) + ":" + value + "; ";					j++;				}				cssString += " }\n";			}																/*var js:XML=				<script>					<![CDATA[							if (asPopup.options.centerVertically == true) {								asPopup.options.top = (screen.availHeight - asPopup.options.height - 40) / 2;							}							else if (asPopup.options.bottom != -1) {								asPopup.options.top = screen.availHeight - asPopup.options.bottom - asPopup.options.height - 40;							}							if (asPopup.options.centerHorizontally == true) {								asPopup.options.left = (screen.availWidth - asPopup.options.width) / 2;							}							else if (asPopup.options.right != -1) {								asPopup.options.left = screen.availWidth - asPopup.options.right - asPopup.options.width;							}*/										var js:String = concatenate([functionHtmlInjectionStart, initAsPopup, setTopLeft, setWindowOptions, openHtmlInjectionWindow, checkHeight, browserWindowSize, findBrowserDimensions, setTimeout, closeFunction]);			var id:String = ExternalInterface.call(js, HTML, options, timeout, cssString, ExternalInterface.objectID);			trace('id = ' + id);						return new Window(int(id));		}		static public function CloseAll():void		{			var js:XML=				<script>					<![CDATA[						function(){							if (this.asPopup == undefined) {								this.asPopup = new Object();								asPopup.popups = {};								asPopup.events = new Object();								asPopup.windows = [];							}							for (var i = 0; i < asPopup.windows.length; ++i){								if (asPopup.windows[i] != undefined){									asPopup.windows[i].close();									asPopup.windows[i] = undefined;								}							}							asPopup.windows = [];						}					]]>				</script>;			ExternalInterface.call(js);		}						static public function isOpen(id:int):Boolean		{			var js:XML=				<script>					<![CDATA[						function(id){							if (this.asPopup == undefined) return false;							else {								if (asPopup.windows[id] == undefined) return false;								else {									if (asPopup.windows[id].closed) return false;									else return true;								}							}						}					]]>				</script>;			return Boolean(ExternalInterface.call(js,id));		}		static public function SetWindowX(id:int,value:int):void		{			var js:XML=				<script>					<![CDATA[						function(id,value){							if (this.asPopup != undefined) {								if (asPopup.windows[id] != undefined) {									asPopup.options.x = value;									asPopup.setTopLeft();									asPopup.setWindowOptions();									asPopup.windows[id].moveTo(asPopup.left, asPopup.windows[id].screenY);								}							}						}					]]>				</script>;			ExternalInterface.call(js,id,value);		}		static public function GetWindowX(id:int):int		{			var js:XML=				<script>					<![CDATA[						function(id){							if (this.asPopup != undefined) {								if (asPopup.windows[id] != undefined) {									return asPopup.windows[id].screenX;								}							}							return 0;						}					]]>				</script>;			return ExternalInterface.call(js, id);		}		static public function SetWindowY(id:int,value:int):void		{			var js:XML=				<script>					<![CDATA[						function(id, value) {							if (this.asPopup != undefined) {								if (asPopup.windows[id] != undefined) {																		asPopup.options.y = value;									asPopup.setTopLeft();									asPopup.setWindowOptions();																		asPopup.windows[id].moveTo(asPopup.windows[id].screenX, asPopup.top);								}							}						}					]]>				</script>;			ExternalInterface.call(js,id,value);		}		static public function GetWindowY(id:int):int		{			var js:XML=				<script>					<![CDATA[						function(id){							if (this.asPopup != undefined) {								if (asPopup.windows[id] != undefined) {									return asPopup.windows[id].screenY;								}							}							return 0;						}					]]>				</script>;			return ExternalInterface.call(js, id);		}		static public function SetWindowAlign(id:int,value:String):void		{			var js:XML=				<script>					<![CDATA[						function(id, value) {							if (this.asPopup != undefined) {								if (asPopup.windows[id] != undefined) {									asPopup.options.align = value;									asPopup.setTopLeft();									asPopup.setWindowOptions();									asPopup.windows[id].moveTo(asPopup.left, asPopup.top);								}							}						}					]]>				</script>;			ExternalInterface.call(js,id,value);		}		static public function GetWindowAlign(id:int):String		{			var js:XML=				<script>					<![CDATA[						function(id){							if (this.asPopup != undefined) {								if (asPopup.windows[id] != undefined) {									return asPopup.windows[id].align;								}							}							return 0;						}					]]>				</script>;			return ExternalInterface.call(js, id);		}				static public function SetWindowWidth(id:int,value:int):void		{			var js:XML=				<script>					<![CDATA[						function(id,value){							if (this.asPopup != undefined) {								if (asPopup.windows[id] != undefined) {									asPopup.options.width = value;									asPopup.windows[id].offsetWidth = 0, asPopup.windows[id].offsetHeight = 0;									asPopup.windows[id].resizeTo(0, 0);									setTimeout('asPopup.delayCall()', 100);									}							}							asPopup.delayCall = function() {								asPopup.browserWindowSize();								asPopup.windows[id].resizeTo(asPopup.windowWidth, asPopup.windows[id].outerHeight);							}						}											]]>				</script>;			ExternalInterface.call(js,id,value);		}		static public function GetWindowWidth(id:int):int		{			var js:XML=				<script>					<![CDATA[						function(id) {							var returnVal = 0;							if (this.asPopup != undefined) {								if (asPopup.windows[id] != undefined) {									if( typeof( asPopup.windows[id].innerWidth ) == 'number' ) {										returnVal = asPopup.windows[id].outerWidth - asPopup.windows[id].offsetWidth;									} else if( asPopup.windows[id].document.documentElement && ( asPopup.windows[id].document.documentElement.clientWidth || asPopup.windows[id].document.documentElement.clientHeight ) ) {										returnVal = asPopup.windows[id].document.documentElement.clientWidth - asPopup.windows[id].offsetWidth;									} else if( asPopup.windows[id].document.body && ( asPopup.windows[id].document.body.clientWidth || asPopup.windows[id].document.body.clientHeight ) ) {										returnVal = asPopup.windows[id].document.body.clientWidth - asPopup.windows[id].offsetWidth;									}								}							}							return returnVal;						}					]]>				</script>;			return ExternalInterface.call(js, id);		}		static public function SetWindowHeight(id:int,value:int):void		{			var js:XML=				<script>					<![CDATA[											function(id,value){							if (this.asPopup != undefined) {								if (asPopup.windows[id] != undefined) {									asPopup.options.height = value;									asPopup.windows[id].offsetWidth = 0, asPopup.windows[id].offsetHeight = 0;									asPopup.windows[id].resizeTo(0, 0);									setTimeout('asPopup.delayCall()', 100);									}							}							asPopup.delayCall = function() {								asPopup.browserWindowSize();								asPopup.windows[id].resizeTo(asPopup.windows[id].outerWidth, asPopup.windowHeight);							}						}					]]>				</script>;			ExternalInterface.call(js,id,value);		}		static public function GetWindowHeight(id:int):int		{			var js:XML=				<script>					<![CDATA[						function(id){							if (this.asPopup != undefined) {								if (asPopup.windows[id] != undefined) {									if( typeof( asPopup.windows[id].innerHeight ) == 'number' ) {										return asPopup.windows[id].outerHeight - asPopup.windows[id].offsetHeight;									} else if( asPopup.windows[id].document.documentElement && ( asPopup.windows[id].document.documentElement.clientHeight || asPopup.windows[id].document.documentElement.clientHeight ) ) {										return asPopup.windows[id].document.documentElement.clientHeight - asPopup.windows[id].offsetHeight;									} else if( asPopup.windows[id].document.body && ( asPopup.windows[id].document.body.clientHeight || asPopup.windows[id].document.body.clientHeight ) ) {										return asPopup.windows[id].document.body.clientHeight - asPopup.windows[id].offsetHeight;									}								}							}							return 0;						}					]]>				</script>;			return ExternalInterface.call(js, id);		}				// private helper functions		static private function changeIDsToLowerCase(s:String):String		{			var returnString:String = "";			var split1:Array = s.split("id='");			returnString += split1[0];			for (var i:int = 1; i < split1.length; ++i) {				returnString += "id='";				var split2:Array = split1[i].split("'");				returnString += split2[0].toLowerCase();				returnString += "'";				returnString += split2[1];			}						var returnString2:String = "";			var split3:Array = returnString.split('id="');			returnString2 += split3[0];			for (var j:int = 1; j < split3.length; ++j) {				returnString2 += 'id="';				var split4:Array = split3[j].split('"');				returnString2 += split4[0].toLowerCase();				returnString2 += '"';				returnString2 += split4[1];			}			return returnString2;		}		static private function objectLength(myObject:Object):int {			var cnt:int=0;			for (var s:String in myObject) cnt++;			return cnt;		}		static private function removePX(string:String, pattern:RegExp = null):String		{			pattern ||= /px/g;			return string.replace(pattern, function x():String			{				return "";			});		}		static private function removeCamelcase(string:String, pattern:RegExp = null):String		{			pattern ||= /[A-Z]/g;			return string.replace(pattern, function x():String			{				return "-" + (arguments[0] as String).toLowerCase();			});		}		static private function replaceCommaSep(string:String, pattern:RegExp = null):String		{			pattern ||= /,/g;			return string.replace(pattern, function x():String			{				return "', '";			});		}		static private function removeSpaces(string:String, pattern:RegExp = null):String		{			var space:RegExp = /\s/g;			return string.replace(space, "");		}				static private function containsComma(string:String):Boolean		{			var r:RegExp = /,/;			if (string.match(r) == null) {				return false;			}			else return true;		}		static private function isNumber(string:String):Boolean		{			var r:RegExp = /^[0-9]+$/;			if (string.match(r) == null) {				return false;			}			else return true;		}		static private function isHex(string:String):Boolean		{			var r:RegExp = /#(?-i:[\da-f]+)/;			if (string.match(r) == null) {				return false;			}			else return true;		}		static private function concatenate(a:Array):String		{			var returnStr:String = "";			for (var i:int = 0; i < a.length; ++i) {				returnStr += String(a[i]);			}			return returnStr;		}				// event lister stuff		protected static var disp:EventDispatcher;		public static function addEventListener(...p_args:Array):void {			if (disp == null) { disp = new EventDispatcher(); }			disp.addEventListener.apply(null, p_args);		}		public static function removeEventListener(...p_args:Array):void {			if (disp == null) { return; }			disp.removeEventListener.apply(null, p_args);		}		public static function dispatchEvent(...p_args:Array):void {			if (disp == null) { return; }			disp.dispatchEvent.apply(null, p_args);		}				// Javascript Code				// Common 		private static var initAsPopup:XML=<![CDATA[						if (this.asPopup == undefined) {							this.asPopup = new Object();							asPopup.popups = {};							asPopup.events = new Object();							asPopup.windows = [];							asPopup.swf = thisMovie(callbackID);							asPopup.callback = function(rest) {								if (asPopup.swf != undefined) {									var params = "";									for (var i = 0; i < rest.length; ++i){										params += rest[i];										if (i < rest.length - 1) params += ', ';									}									asPopup.swf.callback(params);								}							}							asPopup.options = options;						}						function thisMovie(movieName) {							if (navigator.appName.indexOf("Microsoft") != -1) {								return window[movieName];							} else {								return document[movieName];							}						}						]]>;								private static var setTimeout:XML=<![CDATA[						if (timeout != 0) {							timeout *= 1000;							setTimeout('asPopup.AutoClose()', timeout);						}												asPopup.AutoClose = function() {							asPopup.windows[idIndex].close();						}						]]>;								private static var closeFunction:XML=<![CDATA[									return idIndex;								}							]]>;				// Open		private static var functionOpenStart:XML=<![CDATA[						function(URL, options, timeout, callbackID) {							]]>;									private static var setTopLeft:XML =<![CDATA[						asPopup.setTopLeft = function() {							asPopup.optionString = "";							asPopup.valArray = [];							if (asPopup.options.x < 0 && asPopup.options.y < 0 && asPopup.options.align == "") {															}							else if (asPopup.options.x < 0 && asPopup.options.y < 0 && asPopup.options.align == "TL") {															}							else {								var align = asPopup.options.align.toLowerCase();																asPopup.top = 0; 								asPopup.left = 0;								var windowWidth = asPopup.options.width;								if (windowWidth == -1) window.outerWidth;								var windowHeight = asPopup.options.height;								if (windowHeight == -1) window.outerHeight;																if (align == "") {									asPopup.top = asPopup.options.y;									asPopup.left = asPopup.options.x;								}								else if (align == 'b') { 									asPopup.top = screen.availHeight - asPopup.options.y - windowHeight - 62;									asPopup.left = ((screen.availWidth - windowWidth) / 2) + asPopup.options.x;								}								else if (align == 'bl') { 									asPopup.top = screen.availHeight - asPopup.options.y - windowHeight - 62;									asPopup.left = asPopup.options.x;								}								else if (align == 'br') { 									asPopup.top = screen.availHeight - asPopup.options.y - windowHeight - 62;									asPopup.left = screen.availWidth - asPopup.options.x - windowWidth;								}								else if (align == 'l') { 									asPopup.top = ((screen.availHeight - windowHeight) / 2) - asPopup.options.y;									asPopup.left = asPopup.options.x;								}								else if (align == 'r') { 									asPopup.top = ((screen.availHeight - windowHeight) / 2) - asPopup.options.y;									asPopup.left = screen.availWidth - asPopup.options.x - windowWidth;								}								else if (align == 't') { 									asPopup.top = asPopup.options.y;									asPopup.left = ((screen.availWidth - windowWidth) / 2) + asPopup.options.x;								}								else if (align == 'tr') { 									asPopup.top = asPopup.options.y;									asPopup.left = screen.availWidth - asPopup.options.x - windowWidth;								}								else if (align == 'tl') { 									asPopup.top = asPopup.options.y;									asPopup.left = asPopup.options.x;								}								else if (align == 'm') { 									asPopup.top = ((screen.availHeight - windowHeight) / 2) - asPopup.options.y;									asPopup.left = ((screen.availWidth - windowWidth) / 2) + asPopup.options.x;								}								asPopup.valArray.push("top=" + asPopup.top);								asPopup.valArray.push("left=" + asPopup.left);							}						}						asPopup.setTopLeft();						]]>;								private static var setWindowOptions:XML =<![CDATA[						asPopup.setWindowOptions = function() {														if (asPopup.options.width == -1) asPopup.options.width = window.outerWidth;							if (asPopup.options.height == -1) asPopup.options.height = window.outerHeight;														for (var key in asPopup.options) {								var obj = asPopup.options[key];								if (key != "x" && key != "y" && key != "align" && key != "callback") {									if (obj == true) obj = "yes";									else if (obj == false) obj = "no";									asPopup.valArray.push(key + "=" + obj);								}							}							for (var i = 0; i < asPopup.valArray.length; ++i) {								asPopup.optionString += asPopup.valArray[i];								if (i < asPopup.valArray.length - 1) asPopup.optionString += ",";															}						}						asPopup.setWindowOptions();						]]>;								private static var openWindow:XML=<![CDATA[						var idIndex = asPopup.windows.length;						asPopup.windows.push(window.open(URL, '_blank', asPopup.optionString));						asPopup.windows[idIndex].focus();						asPopup.windows[idIndex].asPopup = asPopup;						asPopup.windows[idIndex].align = asPopup.options.align;						]]>;										// HtmlInjection		private static var functionHtmlInjectionStart:XML=<![CDATA[						function(HTML, options, timeout, css, callbackID) {							var asPopup.browserWinWidth = 0, asPopup.browserWinHeight = 0;							]]>;									private static var openHtmlInjectionWindow:XML=<![CDATA[						var idIndex = asPopup.windows.length;						asPopup.windows.push(window.open("", "_blank", asPopup.optionString));												var styleElement = document.createElement('style');						styleElement.setAttribute('type', 'text/css');						if (styleElement.styleSheet) {   // IE							styleElement.styleSheet.cssText = css;						} else { // non-IE							styleElement.appendChild(document.createTextNode(css));						}												if (navigator.appVersion.indexOf("IE") != -1) 						{							asPopup.windows[idIndex].document.write('<!DOCTYPE html>\n');							asPopup.windows[idIndex].document.write('<html>\n');							asPopup.windows[idIndex].document.write('\t<head>\n');							asPopup.windows[idIndex].document.write('\t\t<style type="text/css">\n');							asPopup.windows[idIndex].document.write('\t\t\t'+css+'\n');							asPopup.windows[idIndex].document.write('\t\t</style>\n');							asPopup.windows[idIndex].document.write('\t</head>\n');							asPopup.windows[idIndex].document.write('\t<body>\n');							asPopup.windows[idIndex].document.write('\t\t'+HTML+'\n');							asPopup.windows[idIndex].document.write('\t</body>\n');							asPopup.windows[idIndex].document.write('</html>');						}						else {							asPopup.windows[idIndex].document.write(HTML);							var head = asPopup.windows[idIndex].document.getElementsByTagName('head')[0];							head.appendChild(styleElement);						}						asPopup.windows[idIndex].focus();						asPopup.windows[idIndex].asPopup = asPopup;						asPopup.windows[idIndex].align = asPopup.options.align;												]]>;				private static var checkHeight:XML =<![CDATA[						if (asPopup.options.height != -1 && asPopup.options.height < 100) {							var retryCount = 0;							asPopup.windows[idIndex].offsetWidth = 0, asPopup.windows[idIndex].offsetHeight = 0;							asPopup.windows[idIndex].resizeTo(0, 0);							setTimeout('delayCall()', 100);						}						function delayCall() {							asPopup.browserWindowSize();							asPopup.windows[idIndex].resizeTo(asPopup.windowWidth, asPopup.windowHeight);						}						]]>;								private static var browserWindowSize:XML=<![CDATA[						asPopup.browserWindowSize = function() {																					console.log('browserWindowSize');							asPopup.FindBrowserDimensions();														console.log(window);							var minOffset = (100 - asPopup.options.height);							if (minOffset < 0) minOffset = 0;														if (navigator.userAgent.indexOf("Firefox") != -1)  {								asPopup.windows[idIndex].offsetWidth = 14;								asPopup.windows[idIndex].offsetHeight = asPopup.browserWinHeight - 5;							}							else {								asPopup.windows[idIndex].offsetWidth = asPopup.options.width - asPopup.browserWinWidth;								asPopup.windows[idIndex].offsetHeight = asPopup.options.height - asPopup.browserWinHeight + minOffset;							}							if (asPopup.windows[idIndex].offsetWidth < 0) asPopup.windows[idIndex].offsetWidth = 0;							if (asPopup.windows[idIndex].offsetHeight < 0) asPopup.windows[idIndex].offsetHeight = 0;														asPopup.windowWidth = asPopup.options.width + asPopup.windows[idIndex].offsetWidth;							asPopup.windowHeight = asPopup.options.height + asPopup.windows[idIndex].offsetHeight;														console.log('asPopup.browserWinWidth = ' + asPopup.browserWinWidth);							console.log('asPopup.windows[idIndex].outerHeight = ' + asPopup.windows[idIndex].outerHeight);							console.log('asPopup.windows[idIndex].innerHeight = ' + asPopup.windows[idIndex].innerHeight);							console.log('asPopup.windows[idIndex].document.height = ' + asPopup.windows[idIndex].document.height);							console.log('asPopup.windowHeight = ' + asPopup.windowHeight);																				}						]]>;								private static var findBrowserDimensions:XML=<![CDATA[						asPopup.FindBrowserDimensions = function() {							if( typeof( asPopup.windows[idIndex].innerWidth ) == 'number' ) {								if (navigator.userAgent.indexOf("Firefox") != -1)  {									asPopup.browserWinWidth = asPopup.windows[idIndex].outerWidth;									asPopup.browserWinHeight = asPopup.windows[idIndex].outerHeight;								}								else {									asPopup.browserWinWidth = asPopup.windows[idIndex].innerWidth;									asPopup.browserWinHeight = asPopup.windows[idIndex].innerHeight;								}															} else if( asPopup.windows[idIndex].document.documentElement && ( asPopup.windows[idIndex].document.documentElement.clientWidth || asPopup.windows[idIndex].document.documentElement.clientHeight ) ) {								//IE 6+ in 'standards compliant mode'								asPopup.browserWinWidth = asPopup.windows[idIndex].document.documentElement.clientWidth;								asPopup.browserWinHeight = asPopup.windows[idIndex].document.documentElement.clientHeight;							} else if( asPopup.windows[idIndex].document.body && ( asPopup.windows[idIndex].document.body.clientWidth || asPopup.windows[idIndex].document.body.clientHeight ) ) {								//IE 4 compatible								asPopup.browserWinWidth = asPopup.windows[idIndex].document.body.clientWidth;								asPopup.browserWinHeight = asPopup.windows[idIndex].document.body.clientHeight;							}						}						]]>;	}}