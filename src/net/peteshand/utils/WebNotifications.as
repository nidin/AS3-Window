package net.peteshand.utils {	import flash.display.Sprite;	import flash.external.ExternalInterface;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.ErrorEvent;	import flash.events.EventDispatcher;	/**	 * ...	 * @author Pete Shand	 */	public class WebNotifications extends EventDispatcher 	{		public static var PERMISSION_UNAVAILABLE:int = -1; // indicates that WebNotifications are unavailable		public static var PERMISSION_ALLOWED	:int = 0; // indicates that the user has granted permission to scripts with this origin to show notifications.		public static var PERMISSION_NOT_ALLOWED:int = 1; // indicates that the user has not taken an action regarding notifications for scripts from this origin.		public static var PERMISSION_DENIED		:int = 2; // indicates that the user has explicitly blocked scripts with this origin from showing notifications.				static public function Open(title:String, body:String, icon:String, timeout:int=10):void		{			WebNotifications.AddCallbacks();						var js:XML=				<script>					<![CDATA[						function(id, title, body, icon, timeout){							if (this.asWebNotifications == undefined) {								this.asWebNotifications = new Object();								asWebNotifications.popups = {};								asWebNotifications.events = new Object();							}							asWebNotifications.swf = thisMovie(id);														function thisMovie(movieName) {								if (navigator.appName.indexOf("Microsoft") != -1) {									return window[movieName];								} else {									return document[movieName];								}							}							asWebNotifications.RequestPermission = function(callback){								window.webkitNotifications.requestPermission(callback);							}							asWebNotifications.notification = function(){								if(window.webkitNotifications.checkPermission()>0){									asWebNotifications.RequestPermission(asWebNotifications.notification);									return;								}								if (asWebNotifications.popups[title] == undefined){									asWebNotifications.popups[title] = [];								}								var i = asWebNotifications.popups[title].length;																asWebNotifications.popups[title][i] = window.webkitNotifications.createNotification(icon,title,body);								if (asWebNotifications.swf != undefined){									asWebNotifications.popups[title][i].onshow = asWebNotifications.events.onshow;									asWebNotifications.popups[title][i].ondisplay = asWebNotifications.events.onshow;									asWebNotifications.popups[title][i].onerror = asWebNotifications.events.onerror;									asWebNotifications.popups[title][i].onclose = asWebNotifications.events.onclose;									asWebNotifications.popups[title][i].onclick = asWebNotifications.events.onclick;								}								asWebNotifications.popups[title][i].show();																if (timeout > 0) var timeOuts = setTimeout('asWebNotifications.AutoClose("' + title + '","' + i + '")',timeout); 							}							asWebNotifications.AutoClose = function(id,i)							{								if (asWebNotifications.popups[id][i] != null){									asWebNotifications.popups[id][i].close();									asWebNotifications.popups[id][i].cancel();									asWebNotifications.popups[id][i] = null;								}							}														asWebNotifications.events.onshow = function(){								asWebNotifications.swf.onshow();							}							asWebNotifications.events.onerror = function(){								asWebNotifications.swf.onerror();							}							asWebNotifications.events.onclose = function(){								asWebNotifications.swf.onclose();							}							asWebNotifications.events.onclick = function(){								asWebNotifications.swf.onclick();							}							asWebNotifications.notification();													}					]]>				</script>;			ExternalInterface.call(js, ExternalInterface.objectID, title, body, icon, timeout * 1000);					}		static public function OpenHTML(URL:String, timeout:int=10):void		{			WebNotifications.AddCallbacks();						var js:XML=				<script>					<![CDATA[						function(id, URL, timeout){														if (this.asWebNotifications == undefined) {								this.asWebNotifications = new Object();								asWebNotifications.popups = {};								asWebNotifications.events = new Object();							}							asWebNotifications.swf = thisMovie(id);														function thisMovie(movieName) {								if (navigator.appName.indexOf("Microsoft") != -1) {									return window[movieName];								} else {									return document[movieName];								}							}														asWebNotifications.RequestPermission = function(callback) { 								window.webkitNotifications.requestPermission(callback);							}							asWebNotifications.HTML5notification = function() {								if (window.webkitNotifications.checkPermission() > 0) { 									asWebNotifications.RequestPermission(asWebNotifications.HTML5notification);								}																var propFound = false;								for ( var prop in window.webkitNotifications ) {									if (prop == 'createHTMLNotification') propFound = true;								}								if (propFound){									if (asWebNotifications.popups[URL] == undefined){										asWebNotifications.popups[URL] = [];									}									var i = asWebNotifications.popups[URL].length;									asWebNotifications.popups[URL][i] = window.webkitNotifications.createHTMLNotification(URL); 									if (asWebNotifications.swf != undefined){										asWebNotifications.popups[URL][i].onshow = asWebNotifications.events.onshow;										asWebNotifications.popups[URL][i].ondisplay = asWebNotifications.events.onshow;										asWebNotifications.popups[URL][i].onerror = asWebNotifications.events.onerror;										asWebNotifications.popups[URL][i].onclose = asWebNotifications.events.onclose;										asWebNotifications.popups[URL][i].onclick = asWebNotifications.events.onclick;									}									asWebNotifications.popups[URL][i].show();																		if (timeout > 0) var timeOuts = setTimeout('asWebNotifications.AutoClose("' + URL + '","' + i + '")',timeout); 																	}								else {									asWebNotifications.events.onerror();								}							}																					asWebNotifications.AutoClose = function(id,i)							{								if (asWebNotifications.popups[id][i] != null){									asWebNotifications.popups[id][i].close();									asWebNotifications.popups[id][i].cancel();									asWebNotifications.popups[id][i] = null;								}							}														asWebNotifications.events.onshow = function(){								asWebNotifications.swf.onshow();							}							asWebNotifications.events.onerror = function(){								asWebNotifications.swf.onerror();							}							asWebNotifications.events.onclose = function(){								asWebNotifications.swf.onclose();							}							asWebNotifications.events.onclick = function(){								asWebNotifications.swf.onclick();							}														asWebNotifications.HTML5notification();						}					]]>				</script>;						ExternalInterface.call(js, ExternalInterface.objectID, URL, timeout * 1000);		}		static public function Close(id:String):void		{			var js:XML=				<script>					<![CDATA[						function(id){							if (this.asWebNotifications != undefined) {								var l = this.asWebNotifications.popups[id].length;								for (var i = 0; i < l; ++i){									if (this.asWebNotifications.popups[id][i] != null){										this.asWebNotifications.popups[id][i].close();										this.asWebNotifications.popups[id][i].cancel();										this.asWebNotifications.popups[id][i] = null;									}								}							}						}					]]>				</script>;							ExternalInterface.call(js, id);		}		static public function CloseAll():void		{			var js:XML=				<script>					<![CDATA[						function(title, body, icon, timeout){							if (this.asWebNotifications != undefined) {								for(var propt in this.asWebNotifications.popups){									var l = this.asWebNotifications.popups[propt].length;									for (var i = 0; i < l; ++i){										if (this.asWebNotifications.popups[propt][i] != null){											this.asWebNotifications.popups[propt][i].close();											this.asWebNotifications.popups[propt][i].cancel();											this.asWebNotifications.popups[propt][i] = null;										}									}								}							}						}					]]>				</script>;							ExternalInterface.call(js);		}				static public function requestPermission(callback:Function=null)		{			if (callback != null) ExternalInterface.addCallback('requestPermissionComplete', callback);			var js:XML=				<script>					<![CDATA[						function(id){							if (this.asWebNotifications == undefined) {								this.asWebNotifications = new Object();								asWebNotifications.popups = {};								asWebNotifications.events = new Object();							}							asWebNotifications.swf = thisMovie(id);														function thisMovie(movieName) {								if (navigator.appName.indexOf("Microsoft") != -1) {									return window[movieName];								} else {									return document[movieName];								}							}							asWebNotifications.RequestPermission = function(callback){								window.webkitNotifications.requestPermission(callback);							}														asWebNotifications.requestPermissionComplete = function()							{								if (asWebNotifications.swf != undefined){									asWebNotifications.swf.requestPermissionComplete();								}							}														asWebNotifications.RequestPermission(asWebNotifications.requestPermissionComplete);						}					]]>				</script>;						ExternalInterface.call(js, ExternalInterface.objectID)		}		static public function get permissions():String		{			var i:int = WebNotifications.permissionsVal;			if (i == 0) return 'allowed';			else if (i == 1) return 'not allowed';			else if (i == 2) return 'denied';			else return 'unavailable';		}		static public function get permissionsVal():int		{			var js:XML=				<script>					<![CDATA[						function(){							if(window.webkitNotifications) {								return(window.webkitNotifications.checkPermission());							}							else {								return('-1');							}						}					]]>				</script>;						var returnVal:int = -1;			if (ExternalInterface.available){				returnVal = ExternalInterface.call(js)				trace('checkPermission = ' + returnVal);			}						return returnVal;		}		static public function get available():Boolean		{			var js:XML=				<script>					<![CDATA[						function(){							if(window.webkitNotifications) {								return('true');							}							else {								return('false');							}						}					]]>				</script>;						if (ExternalInterface.available){				var returnVal:String = ExternalInterface.call(js);				if (returnVal){					if (returnVal.toLowerCase() == 'true') return true;					else return false;				}				else return false;			}			else return false;		}		static public function get htmlAvailable():Boolean		{			var js:XML=				<script>					<![CDATA[						function(){							if(window.webkitNotifications) {								var propFound = false;								for ( var prop in window.webkitNotifications ) {									if (prop == 'createHTMLNotification') propFound = true;								}								if (propFound) return('true');								else return('false');							}							else {								return('false');							}						}					]]>				</script>;						if (ExternalInterface.available){				var returnVal:String = ExternalInterface.call(js);				if (returnVal){					if (returnVal.toLowerCase() == 'true') return true;					else return false;				}				else return false;			}			else return false;		}		static public function get eventListenersAvailable():Boolean		{			if (ExternalInterface.objectID == null) return false;			else return true;		}		static private function AddCallbacks():void		{			ExternalInterface.addCallback('onclick', OnClick);			ExternalInterface.addCallback('onshow',  OnShow);			ExternalInterface.addCallback('onerror', OnError);			ExternalInterface.addCallback('onclose', OnClose);		}				static private function OnClick():void		{			dispatchEvent(new MouseEvent(MouseEvent.CLICK));		}		static private function OnShow():void		{			dispatchEvent(new Event(Event.OPEN));		}		static private function OnError():void		{			dispatchEvent(new ErrorEvent(ErrorEvent.ERROR));		}		static private function OnClose():void		{			dispatchEvent(new Event(Event.CLOSE));		}				protected static var disp:EventDispatcher;		public static function addEventListener(...p_args:Array):void {			if (disp == null) { disp = new EventDispatcher(); }			disp.addEventListener.apply(null, p_args);		}		public static function removeEventListener(...p_args:Array):void {			if (disp == null) { return; }			disp.removeEventListener.apply(null, p_args);		}		public static function dispatchEvent(...p_args:Array):void {			if (disp == null) { return; }			disp.dispatchEvent.apply(null, p_args);		}	}}