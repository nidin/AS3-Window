package net.peteshand.utils {	import flash.display.MovieClip;	import flash.events.Event;	import flash.events.EventDispatcher;		/**	 * ...	 * @author Pete Shand	 */	public class Window extends EventDispatcher 	{		public var channelmode:Boolean = false;		public var directories:Boolean = true;		public var fullscreen:Boolean = false;		public var location:Boolean = true;		public var menubar:Boolean = true;		public var resizable:Boolean = true;		public var scrollbars:Boolean = true;		public var titlebar:Boolean = true;		public var toolbar:Boolean = true;				private var url:String;				private var height:int = -1;		private var width:int = -1;				private var x:int = -1;		private var y:int = -1;				private var align:String = '';				private var callback:Function;				public function Window()		{					}				public function openTab(_url:String):void		{			url = _url;			Popup.Open(url);		}		public function openPopup(_url:String):void		{			url = _url;			Popup.Open(url);		}								private var id:int;		private var _x:int;		private var _y:int;		private var _width:int;		private var _height:int;		private var _align:String = "";				private var open:Boolean = true;								public function get x():int 		{			_x = Popup.GetWindowX(id);			return _x;		}				public function set x(value:int):void 		{			_x = value;			Popup.SetWindowX(id,value);		}				public function get y():int 		{			_y = Popup.GetWindowY(id);			return _y;		}				public function set y(value:int):void 		{			_y = value;			Popup.SetWindowY(id,value);		}				public function get width():int 		{			_width = Popup.GetWindowWidth(id);			return _width;		}				public function set width(value:int):void 		{			_width = value;			//Popup.SetWindowWidth(id,value);		}				public function get height():int 		{			_height = Popup.GetWindowHeight(id);			return _height;		}				public function set height(value:int):void 		{			_height = value;			Popup.SetWindowHeight(id,value);		}				public function get align():String 		{			_align = Popup.GetWindowAlign(id);			return _align;		}				public function set align(value:String):void 		{			_align = value;			Popup.SetWindowAlign(id,_align);		}								private var mc:MovieClip = new MovieClip();		private var trackingMovement:Boolean = false;		private var trackingResizing:Boolean = false;		private var trackingClose:Boolean = false;		override public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priorit:int = 0, useWeakReference:Boolean = false):void		{			super.addEventListener(type, listener, useCapture, priorit, useWeakReference);						if (type == WindowEvent.MOVE) {				trackingMovement = true;			}			else if (type == WindowEvent.RESIZE) {				trackingResizing = true;			}			else if (type == WindowEvent.CLOSE) {				trackingClose = true;			}			CheckTracking()					}		private function CheckTracking():void 		{			if (trackingMovement || trackingResizing || trackingClose) {				mc.addEventListener(Event.ENTER_FRAME, OnEnterFrame);			}			else {				mc.removeEventListener(Event.ENTER_FRAME, OnEnterFrame);			}		}		private function OnEnterFrame(e:Event):void 		{			if (trackingClose) {				var t:Boolean = Popup.isOpen(id);				if (open && open != t) {					dispatchEvent(new WindowEvent(WindowEvent.CLOSE));				}				open = t;			}			if (trackingMovement && open) {				if (_x != this.x || _y != this.y) {					dispatchEvent(new WindowEvent(WindowEvent.MOVE));				}			}			if (trackingResizing && open) {				if (_width != this.width || _height != this.height) {					dispatchEvent(new WindowEvent(WindowEvent.RESIZE));				}			}		}	}}